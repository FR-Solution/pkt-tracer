// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: tracehub/service.proto

package tracehub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TraceHubService_TraceStream_FullMethodName   = "/hbf.v1.tracehub.TraceHubService/TraceStream"
	TraceHubService_FetchTraces_FullMethodName   = "/hbf.v1.tracehub.TraceHubService/FetchTraces"
	TraceHubService_SyncNftTables_FullMethodName = "/hbf.v1.tracehub.TraceHubService/SyncNftTables"
	TraceHubService_FetchNftTable_FullMethodName = "/hbf.v1.tracehub.TraceHubService/FetchNftTable"
)

// TraceHubServiceClient is the client API for TraceHubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraceHubServiceClient interface {
	TraceStream(ctx context.Context, opts ...grpc.CallOption) (TraceHubService_TraceStreamClient, error)
	FetchTraces(ctx context.Context, in *TraceScope, opts ...grpc.CallOption) (TraceHubService_FetchTracesClient, error)
	SyncNftTables(ctx context.Context, opts ...grpc.CallOption) (TraceHubService_SyncNftTablesClient, error)
	FetchNftTable(ctx context.Context, in *FetchNftTableQry, opts ...grpc.CallOption) (*NftTableList, error)
}

type traceHubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTraceHubServiceClient(cc grpc.ClientConnInterface) TraceHubServiceClient {
	return &traceHubServiceClient{cc}
}

func (c *traceHubServiceClient) TraceStream(ctx context.Context, opts ...grpc.CallOption) (TraceHubService_TraceStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TraceHubService_ServiceDesc.Streams[0], TraceHubService_TraceStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &traceHubServiceTraceStreamClient{stream}
	return x, nil
}

type TraceHubService_TraceStreamClient interface {
	Send(*Traces) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type traceHubServiceTraceStreamClient struct {
	grpc.ClientStream
}

func (x *traceHubServiceTraceStreamClient) Send(m *Traces) error {
	return x.ClientStream.SendMsg(m)
}

func (x *traceHubServiceTraceStreamClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *traceHubServiceClient) FetchTraces(ctx context.Context, in *TraceScope, opts ...grpc.CallOption) (TraceHubService_FetchTracesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TraceHubService_ServiceDesc.Streams[1], TraceHubService_FetchTraces_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &traceHubServiceFetchTracesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TraceHubService_FetchTracesClient interface {
	Recv() (*TraceList, error)
	grpc.ClientStream
}

type traceHubServiceFetchTracesClient struct {
	grpc.ClientStream
}

func (x *traceHubServiceFetchTracesClient) Recv() (*TraceList, error) {
	m := new(TraceList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *traceHubServiceClient) SyncNftTables(ctx context.Context, opts ...grpc.CallOption) (TraceHubService_SyncNftTablesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TraceHubService_ServiceDesc.Streams[2], TraceHubService_SyncNftTables_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &traceHubServiceSyncNftTablesClient{stream}
	return x, nil
}

type TraceHubService_SyncNftTablesClient interface {
	Send(*SyncTableReq) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type traceHubServiceSyncNftTablesClient struct {
	grpc.ClientStream
}

func (x *traceHubServiceSyncNftTablesClient) Send(m *SyncTableReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *traceHubServiceSyncNftTablesClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *traceHubServiceClient) FetchNftTable(ctx context.Context, in *FetchNftTableQry, opts ...grpc.CallOption) (*NftTableList, error) {
	out := new(NftTableList)
	err := c.cc.Invoke(ctx, TraceHubService_FetchNftTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraceHubServiceServer is the server API for TraceHubService service.
// All implementations must embed UnimplementedTraceHubServiceServer
// for forward compatibility
type TraceHubServiceServer interface {
	TraceStream(TraceHubService_TraceStreamServer) error
	FetchTraces(*TraceScope, TraceHubService_FetchTracesServer) error
	SyncNftTables(TraceHubService_SyncNftTablesServer) error
	FetchNftTable(context.Context, *FetchNftTableQry) (*NftTableList, error)
	mustEmbedUnimplementedTraceHubServiceServer()
}

// UnimplementedTraceHubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTraceHubServiceServer struct {
}

func (UnimplementedTraceHubServiceServer) TraceStream(TraceHubService_TraceStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TraceStream not implemented")
}
func (UnimplementedTraceHubServiceServer) FetchTraces(*TraceScope, TraceHubService_FetchTracesServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchTraces not implemented")
}
func (UnimplementedTraceHubServiceServer) SyncNftTables(TraceHubService_SyncNftTablesServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncNftTables not implemented")
}
func (UnimplementedTraceHubServiceServer) FetchNftTable(context.Context, *FetchNftTableQry) (*NftTableList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchNftTable not implemented")
}
func (UnimplementedTraceHubServiceServer) mustEmbedUnimplementedTraceHubServiceServer() {}

// UnsafeTraceHubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraceHubServiceServer will
// result in compilation errors.
type UnsafeTraceHubServiceServer interface {
	mustEmbedUnimplementedTraceHubServiceServer()
}

func RegisterTraceHubServiceServer(s grpc.ServiceRegistrar, srv TraceHubServiceServer) {
	s.RegisterService(&TraceHubService_ServiceDesc, srv)
}

func _TraceHubService_TraceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TraceHubServiceServer).TraceStream(&traceHubServiceTraceStreamServer{stream})
}

type TraceHubService_TraceStreamServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Traces, error)
	grpc.ServerStream
}

type traceHubServiceTraceStreamServer struct {
	grpc.ServerStream
}

func (x *traceHubServiceTraceStreamServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *traceHubServiceTraceStreamServer) Recv() (*Traces, error) {
	m := new(Traces)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TraceHubService_FetchTraces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TraceScope)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TraceHubServiceServer).FetchTraces(m, &traceHubServiceFetchTracesServer{stream})
}

type TraceHubService_FetchTracesServer interface {
	Send(*TraceList) error
	grpc.ServerStream
}

type traceHubServiceFetchTracesServer struct {
	grpc.ServerStream
}

func (x *traceHubServiceFetchTracesServer) Send(m *TraceList) error {
	return x.ServerStream.SendMsg(m)
}

func _TraceHubService_SyncNftTables_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TraceHubServiceServer).SyncNftTables(&traceHubServiceSyncNftTablesServer{stream})
}

type TraceHubService_SyncNftTablesServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*SyncTableReq, error)
	grpc.ServerStream
}

type traceHubServiceSyncNftTablesServer struct {
	grpc.ServerStream
}

func (x *traceHubServiceSyncNftTablesServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *traceHubServiceSyncNftTablesServer) Recv() (*SyncTableReq, error) {
	m := new(SyncTableReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TraceHubService_FetchNftTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchNftTableQry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceHubServiceServer).FetchNftTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TraceHubService_FetchNftTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceHubServiceServer).FetchNftTable(ctx, req.(*FetchNftTableQry))
	}
	return interceptor(ctx, in, info, handler)
}

// TraceHubService_ServiceDesc is the grpc.ServiceDesc for TraceHubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TraceHubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hbf.v1.tracehub.TraceHubService",
	HandlerType: (*TraceHubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchNftTable",
			Handler:    _TraceHubService_FetchNftTable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TraceStream",
			Handler:       _TraceHubService_TraceStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FetchTraces",
			Handler:       _TraceHubService_FetchTraces_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncNftTables",
			Handler:       _TraceHubService_SyncNftTables_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "tracehub/service.proto",
}
