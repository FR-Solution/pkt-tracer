// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: tracehub/messages.proto

package tracehub

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Trace: traces of network packets transmitted to the server
type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trace id
	TrId uint32 `protobuf:"varint,1,opt,name=tr_id,json=trId,proto3" json:"tr_id,omitempty"`
	// nftables table name
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// nftables chain name
	Chain string `protobuf:"bytes,3,opt,name=chain,proto3" json:"chain,omitempty"`
	// nftables jump to a target name
	JumpTarget string `protobuf:"bytes,4,opt,name=jump_target,json=jumpTarget,proto3" json:"jump_target,omitempty"`
	// nftables rule number
	RuleHandle uint64 `protobuf:"varint,5,opt,name=rule_handle,json=ruleHandle,proto3" json:"rule_handle,omitempty"`
	// protocols family
	Family string `protobuf:"bytes,6,opt,name=family,proto3" json:"family,omitempty"`
	// input network interface
	Iifname string `protobuf:"bytes,7,opt,name=iifname,proto3" json:"iifname,omitempty"`
	// output network interface
	Oifname string `protobuf:"bytes,8,opt,name=oifname,proto3" json:"oifname,omitempty"`
	// source mac address
	SMacAddr string `protobuf:"bytes,9,opt,name=s_mac_addr,json=sMacAddr,proto3" json:"s_mac_addr,omitempty"`
	// destination mac address
	DMacAddr string `protobuf:"bytes,10,opt,name=d_mac_addr,json=dMacAddr,proto3" json:"d_mac_addr,omitempty"`
	// source ip address
	SAddr string `protobuf:"bytes,11,opt,name=s_addr,json=sAddr,proto3" json:"s_addr,omitempty"`
	// destination ip address
	DAddr string `protobuf:"bytes,12,opt,name=d_addr,json=dAddr,proto3" json:"d_addr,omitempty"`
	// source port
	SPort uint32 `protobuf:"varint,13,opt,name=s_port,json=sPort,proto3" json:"s_port,omitempty"`
	// destination port
	DPort uint32 `protobuf:"varint,14,opt,name=d_port,json=dPort,proto3" json:"d_port,omitempty"`
	// length packet
	Length uint32 `protobuf:"varint,15,opt,name=length,proto3" json:"length,omitempty"`
	// ip protocol (tcp/udp/icmp/...)
	IpProto string `protobuf:"bytes,16,opt,name=ip_proto,json=ipProto,proto3" json:"ip_proto,omitempty"`
	// verdict for the rule
	Verdict string `protobuf:"bytes,17,opt,name=verdict,proto3" json:"verdict,omitempty"`
	// rule expression
	Rule string `protobuf:"bytes,18,opt,name=rule,proto3" json:"rule,omitempty"`
	// name of the security group for src ip
	SSgName string `protobuf:"bytes,19,opt,name=s_sg_name,json=sSgName,proto3" json:"s_sg_name,omitempty"`
	// name of the security group for dst ip
	DSgName string `protobuf:"bytes,20,opt,name=d_sg_name,json=dSgName,proto3" json:"d_sg_name,omitempty"`
	// name of the network for src ip
	SSgNet string `protobuf:"bytes,21,opt,name=s_sg_net,json=sSgNet,proto3" json:"s_sg_net,omitempty"`
	// name of the network for dst ip
	DSgNet string `protobuf:"bytes,22,opt,name=d_sg_net,json=dSgNet,proto3" json:"d_sg_net,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracehub_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_tracehub_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_tracehub_messages_proto_rawDescGZIP(), []int{0}
}

func (x *Trace) GetTrId() uint32 {
	if x != nil {
		return x.TrId
	}
	return 0
}

func (x *Trace) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Trace) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *Trace) GetJumpTarget() string {
	if x != nil {
		return x.JumpTarget
	}
	return ""
}

func (x *Trace) GetRuleHandle() uint64 {
	if x != nil {
		return x.RuleHandle
	}
	return 0
}

func (x *Trace) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *Trace) GetIifname() string {
	if x != nil {
		return x.Iifname
	}
	return ""
}

func (x *Trace) GetOifname() string {
	if x != nil {
		return x.Oifname
	}
	return ""
}

func (x *Trace) GetSMacAddr() string {
	if x != nil {
		return x.SMacAddr
	}
	return ""
}

func (x *Trace) GetDMacAddr() string {
	if x != nil {
		return x.DMacAddr
	}
	return ""
}

func (x *Trace) GetSAddr() string {
	if x != nil {
		return x.SAddr
	}
	return ""
}

func (x *Trace) GetDAddr() string {
	if x != nil {
		return x.DAddr
	}
	return ""
}

func (x *Trace) GetSPort() uint32 {
	if x != nil {
		return x.SPort
	}
	return 0
}

func (x *Trace) GetDPort() uint32 {
	if x != nil {
		return x.DPort
	}
	return 0
}

func (x *Trace) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Trace) GetIpProto() string {
	if x != nil {
		return x.IpProto
	}
	return ""
}

func (x *Trace) GetVerdict() string {
	if x != nil {
		return x.Verdict
	}
	return ""
}

func (x *Trace) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *Trace) GetSSgName() string {
	if x != nil {
		return x.SSgName
	}
	return ""
}

func (x *Trace) GetDSgName() string {
	if x != nil {
		return x.DSgName
	}
	return ""
}

func (x *Trace) GetSSgNet() string {
	if x != nil {
		return x.SSgNet
	}
	return ""
}

func (x *Trace) GetDSgNet() string {
	if x != nil {
		return x.DSgNet
	}
	return ""
}

// Traces: represents subject of traces
type Traces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trace items
	Traces []*Trace `protobuf:"bytes,1,rep,name=traces,proto3" json:"traces,omitempty"`
}

func (x *Traces) Reset() {
	*x = Traces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracehub_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Traces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traces) ProtoMessage() {}

func (x *Traces) ProtoReflect() protoreflect.Message {
	mi := &file_tracehub_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traces.ProtoReflect.Descriptor instead.
func (*Traces) Descriptor() ([]byte, []int) {
	return file_tracehub_messages_proto_rawDescGZIP(), []int{1}
}

func (x *Traces) GetTraces() []*Trace {
	if x != nil {
		return x.Traces
	}
	return nil
}

// FetchTrace: fetch trace from server
type FetchTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trace content
	Trace *Trace `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	// table id related to trace
	TableId uint64 `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// trace creation time
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *FetchTrace) Reset() {
	*x = FetchTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracehub_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTrace) ProtoMessage() {}

func (x *FetchTrace) ProtoReflect() protoreflect.Message {
	mi := &file_tracehub_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTrace.ProtoReflect.Descriptor instead.
func (*FetchTrace) Descriptor() ([]byte, []int) {
	return file_tracehub_messages_proto_rawDescGZIP(), []int{2}
}

func (x *FetchTrace) GetTrace() *Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *FetchTrace) GetTableId() uint64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *FetchTrace) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// TraceList: represents list of traces fetched from server
type TraceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Traces []*FetchTrace `protobuf:"bytes,1,rep,name=traces,proto3" json:"traces,omitempty"`
}

func (x *TraceList) Reset() {
	*x = TraceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracehub_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceList) ProtoMessage() {}

func (x *TraceList) ProtoReflect() protoreflect.Message {
	mi := &file_tracehub_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceList.ProtoReflect.Descriptor instead.
func (*TraceList) Descriptor() ([]byte, []int) {
	return file_tracehub_messages_proto_rawDescGZIP(), []int{3}
}

func (x *TraceList) GetTraces() []*FetchTrace {
	if x != nil {
		return x.Traces
	}
	return nil
}

// TimeRange: represents time interval filter parameter
type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// time from
	From *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// time to
	To *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracehub_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_tracehub_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_tracehub_messages_proto_rawDescGZIP(), []int{4}
}

func (x *TimeRange) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TimeRange) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

// TraceScope -
type TraceScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trace id
	TrId []uint32 `protobuf:"varint,1,rep,packed,name=tr_id,json=trId,proto3" json:"tr_id,omitempty"`
	// nftables table name
	Table []string `protobuf:"bytes,2,rep,name=table,proto3" json:"table,omitempty"`
	// nftables chain name
	Chain []string `protobuf:"bytes,3,rep,name=chain,proto3" json:"chain,omitempty"`
	// nftables jump to a target name
	JumpTarget []string `protobuf:"bytes,4,rep,name=jump_target,json=jumpTarget,proto3" json:"jump_target,omitempty"`
	// nftables rule number
	RuleHandle []uint64 `protobuf:"varint,5,rep,packed,name=rule_handle,json=ruleHandle,proto3" json:"rule_handle,omitempty"`
	// protocols family
	Family []string `protobuf:"bytes,6,rep,name=family,proto3" json:"family,omitempty"`
	// input network interface
	Iifname []string `protobuf:"bytes,7,rep,name=iifname,proto3" json:"iifname,omitempty"`
	// output network interface
	Oifname []string `protobuf:"bytes,8,rep,name=oifname,proto3" json:"oifname,omitempty"`
	// source mac address
	SMacAddr []string `protobuf:"bytes,9,rep,name=s_mac_addr,json=sMacAddr,proto3" json:"s_mac_addr,omitempty"`
	// destination mac address
	DMacAddr []string `protobuf:"bytes,10,rep,name=d_mac_addr,json=dMacAddr,proto3" json:"d_mac_addr,omitempty"`
	// source ip address
	SAddr []string `protobuf:"bytes,11,rep,name=s_addr,json=sAddr,proto3" json:"s_addr,omitempty"`
	// destination ip address
	DAddr []string `protobuf:"bytes,12,rep,name=d_addr,json=dAddr,proto3" json:"d_addr,omitempty"`
	// source port
	SPort []uint32 `protobuf:"varint,13,rep,packed,name=s_port,json=sPort,proto3" json:"s_port,omitempty"`
	// destination port
	DPort []uint32 `protobuf:"varint,14,rep,packed,name=d_port,json=dPort,proto3" json:"d_port,omitempty"`
	// length packet
	Length []uint32 `protobuf:"varint,15,rep,packed,name=length,proto3" json:"length,omitempty"`
	// ip protocol (tcp/udp/icmp/...)
	IpProto []string `protobuf:"bytes,16,rep,name=ip_proto,json=ipProto,proto3" json:"ip_proto,omitempty"`
	// verdict for the rule
	Verdict []string `protobuf:"bytes,17,rep,name=verdict,proto3" json:"verdict,omitempty"`
	// rule expression
	Rule []string `protobuf:"bytes,18,rep,name=rule,proto3" json:"rule,omitempty"`
	// name of the security group for src ip
	SSgName []string `protobuf:"bytes,19,rep,name=s_sg_name,json=sSgName,proto3" json:"s_sg_name,omitempty"`
	// name of the security group for dst ip
	DSgName []string `protobuf:"bytes,20,rep,name=d_sg_name,json=dSgName,proto3" json:"d_sg_name,omitempty"`
	// name of the network for src ip
	SSgNet []string `protobuf:"bytes,21,rep,name=s_sg_net,json=sSgNet,proto3" json:"s_sg_net,omitempty"`
	// name of the network for dst ip
	DSgNet []string `protobuf:"bytes,22,rep,name=d_sg_net,json=dSgNet,proto3" json:"d_sg_net,omitempty"`
	// follow mode on/off
	FollowMode bool `protobuf:"varint,23,opt,name=follow_mode,json=followMode,proto3" json:"follow_mode,omitempty"`
	// time interval filter parameter
	Time *TimeRange `protobuf:"bytes,24,opt,name=time,proto3" json:"time,omitempty"`
	// complex query filter parameter
	Query string `protobuf:"bytes,25,opt,name=query,proto3" json:"query,omitempty"`
	// list of visor agents identifiers
	AgentsIds []string `protobuf:"bytes,26,rep,name=agents_ids,json=agentsIds,proto3" json:"agents_ids,omitempty"`
}

func (x *TraceScope) Reset() {
	*x = TraceScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracehub_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceScope) ProtoMessage() {}

func (x *TraceScope) ProtoReflect() protoreflect.Message {
	mi := &file_tracehub_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceScope.ProtoReflect.Descriptor instead.
func (*TraceScope) Descriptor() ([]byte, []int) {
	return file_tracehub_messages_proto_rawDescGZIP(), []int{5}
}

func (x *TraceScope) GetTrId() []uint32 {
	if x != nil {
		return x.TrId
	}
	return nil
}

func (x *TraceScope) GetTable() []string {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *TraceScope) GetChain() []string {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *TraceScope) GetJumpTarget() []string {
	if x != nil {
		return x.JumpTarget
	}
	return nil
}

func (x *TraceScope) GetRuleHandle() []uint64 {
	if x != nil {
		return x.RuleHandle
	}
	return nil
}

func (x *TraceScope) GetFamily() []string {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *TraceScope) GetIifname() []string {
	if x != nil {
		return x.Iifname
	}
	return nil
}

func (x *TraceScope) GetOifname() []string {
	if x != nil {
		return x.Oifname
	}
	return nil
}

func (x *TraceScope) GetSMacAddr() []string {
	if x != nil {
		return x.SMacAddr
	}
	return nil
}

func (x *TraceScope) GetDMacAddr() []string {
	if x != nil {
		return x.DMacAddr
	}
	return nil
}

func (x *TraceScope) GetSAddr() []string {
	if x != nil {
		return x.SAddr
	}
	return nil
}

func (x *TraceScope) GetDAddr() []string {
	if x != nil {
		return x.DAddr
	}
	return nil
}

func (x *TraceScope) GetSPort() []uint32 {
	if x != nil {
		return x.SPort
	}
	return nil
}

func (x *TraceScope) GetDPort() []uint32 {
	if x != nil {
		return x.DPort
	}
	return nil
}

func (x *TraceScope) GetLength() []uint32 {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *TraceScope) GetIpProto() []string {
	if x != nil {
		return x.IpProto
	}
	return nil
}

func (x *TraceScope) GetVerdict() []string {
	if x != nil {
		return x.Verdict
	}
	return nil
}

func (x *TraceScope) GetRule() []string {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *TraceScope) GetSSgName() []string {
	if x != nil {
		return x.SSgName
	}
	return nil
}

func (x *TraceScope) GetDSgName() []string {
	if x != nil {
		return x.DSgName
	}
	return nil
}

func (x *TraceScope) GetSSgNet() []string {
	if x != nil {
		return x.SSgNet
	}
	return nil
}

func (x *TraceScope) GetDSgNet() []string {
	if x != nil {
		return x.DSgNet
	}
	return nil
}

func (x *TraceScope) GetFollowMode() bool {
	if x != nil {
		return x.FollowMode
	}
	return false
}

func (x *TraceScope) GetTime() *TimeRange {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TraceScope) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *TraceScope) GetAgentsIds() []string {
	if x != nil {
		return x.AgentsIds
	}
	return nil
}

// NftRuleInChain: rule to chain
type NftRuleInChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// nftables chain name
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	// rule expression
	Rule string `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *NftRuleInChain) Reset() {
	*x = NftRuleInChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracehub_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftRuleInChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftRuleInChain) ProtoMessage() {}

func (x *NftRuleInChain) ProtoReflect() protoreflect.Message {
	mi := &file_tracehub_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftRuleInChain.ProtoReflect.Descriptor instead.
func (*NftRuleInChain) Descriptor() ([]byte, []int) {
	return file_tracehub_messages_proto_rawDescGZIP(), []int{6}
}

func (x *NftRuleInChain) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *NftRuleInChain) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

// NftTable: nft tables transmitted to server from client
type NftTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// nftables table name
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// protocols family
	TableFamily string `protobuf:"bytes,2,opt,name=table_family,json=tableFamily,proto3" json:"table_family,omitempty"`
	// nftables table represented as string
	TableStr string `protobuf:"bytes,3,opt,name=table_str,json=tableStr,proto3" json:"table_str,omitempty"`
	// nftables rules items
	Rules []*NftRuleInChain `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *NftTable) Reset() {
	*x = NftTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracehub_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftTable) ProtoMessage() {}

func (x *NftTable) ProtoReflect() protoreflect.Message {
	mi := &file_tracehub_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftTable.ProtoReflect.Descriptor instead.
func (*NftTable) Descriptor() ([]byte, []int) {
	return file_tracehub_messages_proto_rawDescGZIP(), []int{7}
}

func (x *NftTable) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *NftTable) GetTableFamily() string {
	if x != nil {
		return x.TableFamily
	}
	return ""
}

func (x *NftTable) GetTableStr() string {
	if x != nil {
		return x.TableStr
	}
	return ""
}

func (x *NftTable) GetRules() []*NftRuleInChain {
	if x != nil {
		return x.Rules
	}
	return nil
}

type SyncTableReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// nftables tables items
	Table []*NftTable `protobuf:"bytes,1,rep,name=table,proto3" json:"table,omitempty"`
}

func (x *SyncTableReq) Reset() {
	*x = SyncTableReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracehub_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncTableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncTableReq) ProtoMessage() {}

func (x *SyncTableReq) ProtoReflect() protoreflect.Message {
	mi := &file_tracehub_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncTableReq.ProtoReflect.Descriptor instead.
func (*SyncTableReq) Descriptor() ([]byte, []int) {
	return file_tracehub_messages_proto_rawDescGZIP(), []int{8}
}

func (x *SyncTableReq) GetTable() []*NftTable {
	if x != nil {
		return x.Table
	}
	return nil
}

type FetchNftTableQry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Scoped:
	//
	//	*FetchNftTableQry_NoScope
	//	*FetchNftTableQry_ScopedByTableId
	Scoped isFetchNftTableQry_Scoped `protobuf_oneof:"scoped"`
}

func (x *FetchNftTableQry) Reset() {
	*x = FetchNftTableQry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracehub_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNftTableQry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNftTableQry) ProtoMessage() {}

func (x *FetchNftTableQry) ProtoReflect() protoreflect.Message {
	mi := &file_tracehub_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNftTableQry.ProtoReflect.Descriptor instead.
func (*FetchNftTableQry) Descriptor() ([]byte, []int) {
	return file_tracehub_messages_proto_rawDescGZIP(), []int{9}
}

func (m *FetchNftTableQry) GetScoped() isFetchNftTableQry_Scoped {
	if m != nil {
		return m.Scoped
	}
	return nil
}

func (x *FetchNftTableQry) GetNoScope() *FetchNftTableQry_All {
	if x, ok := x.GetScoped().(*FetchNftTableQry_NoScope); ok {
		return x.NoScope
	}
	return nil
}

func (x *FetchNftTableQry) GetScopedByTableId() *FetchNftTableQry_ByTableId {
	if x, ok := x.GetScoped().(*FetchNftTableQry_ScopedByTableId); ok {
		return x.ScopedByTableId
	}
	return nil
}

type isFetchNftTableQry_Scoped interface {
	isFetchNftTableQry_Scoped()
}

type FetchNftTableQry_NoScope struct {
	NoScope *FetchNftTableQry_All `protobuf:"bytes,1,opt,name=no_scope,json=noScope,proto3,oneof"`
}

type FetchNftTableQry_ScopedByTableId struct {
	ScopedByTableId *FetchNftTableQry_ByTableId `protobuf:"bytes,2,opt,name=scoped_by_table_id,json=scopedByTableId,proto3,oneof"`
}

func (*FetchNftTableQry_NoScope) isFetchNftTableQry_Scoped() {}

func (*FetchNftTableQry_ScopedByTableId) isFetchNftTableQry_Scoped() {}

// NftTableResp: response nft table from server
type NftTableResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// table id
	TableId uint64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// nftables table represented as string
	TableStr string `protobuf:"bytes,2,opt,name=table_str,json=tableStr,proto3" json:"table_str,omitempty"`
	// timestamp
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *NftTableResp) Reset() {
	*x = NftTableResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracehub_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftTableResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftTableResp) ProtoMessage() {}

func (x *NftTableResp) ProtoReflect() protoreflect.Message {
	mi := &file_tracehub_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftTableResp.ProtoReflect.Descriptor instead.
func (*NftTableResp) Descriptor() ([]byte, []int) {
	return file_tracehub_messages_proto_rawDescGZIP(), []int{10}
}

func (x *NftTableResp) GetTableId() uint64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *NftTableResp) GetTableStr() string {
	if x != nil {
		return x.TableStr
	}
	return ""
}

func (x *NftTableResp) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type NftTableList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fetched tables
	Tables []*NftTableResp `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *NftTableList) Reset() {
	*x = NftTableList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracehub_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftTableList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftTableList) ProtoMessage() {}

func (x *NftTableList) ProtoReflect() protoreflect.Message {
	mi := &file_tracehub_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftTableList.ProtoReflect.Descriptor instead.
func (*NftTableList) Descriptor() ([]byte, []int) {
	return file_tracehub_messages_proto_rawDescGZIP(), []int{11}
}

func (x *NftTableList) GetTables() []*NftTableResp {
	if x != nil {
		return x.Tables
	}
	return nil
}

type FetchNftTableQry_All struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchNftTableQry_All) Reset() {
	*x = FetchNftTableQry_All{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracehub_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNftTableQry_All) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNftTableQry_All) ProtoMessage() {}

func (x *FetchNftTableQry_All) ProtoReflect() protoreflect.Message {
	mi := &file_tracehub_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNftTableQry_All.ProtoReflect.Descriptor instead.
func (*FetchNftTableQry_All) Descriptor() ([]byte, []int) {
	return file_tracehub_messages_proto_rawDescGZIP(), []int{9, 0}
}

type FetchNftTableQry_ByTableId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId []uint64 `protobuf:"varint,1,rep,packed,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
}

func (x *FetchNftTableQry_ByTableId) Reset() {
	*x = FetchNftTableQry_ByTableId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracehub_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNftTableQry_ByTableId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNftTableQry_ByTableId) ProtoMessage() {}

func (x *FetchNftTableQry_ByTableId) ProtoReflect() protoreflect.Message {
	mi := &file_tracehub_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNftTableQry_ByTableId.ProtoReflect.Descriptor instead.
func (*FetchNftTableQry_ByTableId) Descriptor() ([]byte, []int) {
	return file_tracehub_messages_proto_rawDescGZIP(), []int{9, 1}
}

func (x *FetchNftTableQry_ByTableId) GetTableId() []uint64 {
	if x != nil {
		return x.TableId
	}
	return nil
}

var File_tracehub_messages_proto protoreflect.FileDescriptor

var file_tracehub_messages_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x72, 0x61, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x04, 0x0a, 0x05, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x75, 0x6d, 0x70,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x75, 0x6c,
	0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x69, 0x66,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x69, 0x66, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x41, 0x64, 0x64, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x09,
	0x73, 0x5f, 0x73, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x53, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x64, 0x5f, 0x73, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x53, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x73, 0x5f, 0x73, 0x67, 0x5f, 0x6e, 0x65, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x53, 0x67, 0x4e, 0x65, 0x74, 0x12, 0x18,
	0x0a, 0x08, 0x64, 0x5f, 0x73, 0x67, 0x5f, 0x6e, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x53, 0x67, 0x4e, 0x65, 0x74, 0x22, 0x28, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x22, 0x7f, 0x0a, 0x0a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x30, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x06, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xb6,
	0x05, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x05, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x75, 0x6d, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x69, 0x66, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x69, 0x66, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a,
	0x73, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x64, 0x5f,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x15, 0x0a, 0x06, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69,
	0x63, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x73, 0x5f, 0x73, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x53, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x09, 0x64, 0x5f, 0x73, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x53, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x08, 0x73, 0x5f, 0x73, 0x67, 0x5f, 0x6e, 0x65, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x53, 0x67, 0x4e, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x64, 0x5f, 0x73, 0x67, 0x5f,
	0x6e, 0x65, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x53, 0x67, 0x4e, 0x65,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x73, 0x22, 0x43, 0x0a, 0x0e, 0x4e, 0x66, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x90, 0x01, 0x0a,
	0x08, 0x4e, 0x66, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4e, 0x66, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x2f, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x4e, 0x66, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0xcb, 0x01, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x66, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x51, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e,
	0x66, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x07, 0x6e, 0x6f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x66, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x72, 0x79, 0x2e, 0x42, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x42, 0x79, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x05, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x1a, 0x26, 0x0a, 0x09,
	0x42, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x22, 0x80,
	0x01, 0x0a, 0x0c, 0x4e, 0x66, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x35, 0x0a, 0x0c, 0x4e, 0x66, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x4e, 0x66, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x69, 0x6c, 0x64, 0x62, 0x65, 0x72, 0x72, 0x69,
	0x65, 0x73, 0x2d, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x70, 0x6b, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x68, 0x75, 0x62, 0x3b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x68, 0x75, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tracehub_messages_proto_rawDescOnce sync.Once
	file_tracehub_messages_proto_rawDescData = file_tracehub_messages_proto_rawDesc
)

func file_tracehub_messages_proto_rawDescGZIP() []byte {
	file_tracehub_messages_proto_rawDescOnce.Do(func() {
		file_tracehub_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_tracehub_messages_proto_rawDescData)
	})
	return file_tracehub_messages_proto_rawDescData
}

var file_tracehub_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_tracehub_messages_proto_goTypes = []any{
	(*Trace)(nil),                      // 0: Trace
	(*Traces)(nil),                     // 1: Traces
	(*FetchTrace)(nil),                 // 2: FetchTrace
	(*TraceList)(nil),                  // 3: TraceList
	(*TimeRange)(nil),                  // 4: TimeRange
	(*TraceScope)(nil),                 // 5: TraceScope
	(*NftRuleInChain)(nil),             // 6: NftRuleInChain
	(*NftTable)(nil),                   // 7: NftTable
	(*SyncTableReq)(nil),               // 8: SyncTableReq
	(*FetchNftTableQry)(nil),           // 9: FetchNftTableQry
	(*NftTableResp)(nil),               // 10: NftTableResp
	(*NftTableList)(nil),               // 11: NftTableList
	(*FetchNftTableQry_All)(nil),       // 12: FetchNftTableQry.All
	(*FetchNftTableQry_ByTableId)(nil), // 13: FetchNftTableQry.ByTableId
	(*timestamppb.Timestamp)(nil),      // 14: google.protobuf.Timestamp
}
var file_tracehub_messages_proto_depIdxs = []int32{
	0,  // 0: Traces.traces:type_name -> Trace
	0,  // 1: FetchTrace.trace:type_name -> Trace
	14, // 2: FetchTrace.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 3: TraceList.traces:type_name -> FetchTrace
	14, // 4: TimeRange.from:type_name -> google.protobuf.Timestamp
	14, // 5: TimeRange.to:type_name -> google.protobuf.Timestamp
	4,  // 6: TraceScope.time:type_name -> TimeRange
	6,  // 7: NftTable.rules:type_name -> NftRuleInChain
	7,  // 8: SyncTableReq.table:type_name -> NftTable
	12, // 9: FetchNftTableQry.no_scope:type_name -> FetchNftTableQry.All
	13, // 10: FetchNftTableQry.scoped_by_table_id:type_name -> FetchNftTableQry.ByTableId
	14, // 11: NftTableResp.timestamp:type_name -> google.protobuf.Timestamp
	10, // 12: NftTableList.tables:type_name -> NftTableResp
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_tracehub_messages_proto_init() }
func file_tracehub_messages_proto_init() {
	if File_tracehub_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tracehub_messages_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracehub_messages_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Traces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracehub_messages_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FetchTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracehub_messages_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TraceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracehub_messages_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracehub_messages_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TraceScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracehub_messages_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*NftRuleInChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracehub_messages_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*NftTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracehub_messages_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SyncTableReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracehub_messages_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*FetchNftTableQry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracehub_messages_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*NftTableResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracehub_messages_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*NftTableList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracehub_messages_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*FetchNftTableQry_All); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracehub_messages_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*FetchNftTableQry_ByTableId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tracehub_messages_proto_msgTypes[9].OneofWrappers = []any{
		(*FetchNftTableQry_NoScope)(nil),
		(*FetchNftTableQry_ScopedByTableId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tracehub_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tracehub_messages_proto_goTypes,
		DependencyIndexes: file_tracehub_messages_proto_depIdxs,
		MessageInfos:      file_tracehub_messages_proto_msgTypes,
	}.Build()
	File_tracehub_messages_proto = out.File
	file_tracehub_messages_proto_rawDesc = nil
	file_tracehub_messages_proto_goTypes = nil
	file_tracehub_messages_proto_depIdxs = nil
}
