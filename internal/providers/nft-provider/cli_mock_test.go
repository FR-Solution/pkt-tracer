// Code generated by mockery v2.44.1. DO NOT EDIT.

package nftprovider

import (
	context "context"

	tracehub "github.com/wildberries-tech/pkt-tracer/pkg/api/tracehub"

	grpc "google.golang.org/grpc"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// FetchNftTable provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockClient) FetchNftTable(_a0 context.Context, _a1 *tracehub.FetchNftTableQry, _a2 ...grpc.CallOption) (*tracehub.NftTableList, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FetchNftTable")
	}

	var r0 *tracehub.NftTableList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tracehub.FetchNftTableQry, ...grpc.CallOption) (*tracehub.NftTableList, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tracehub.FetchNftTableQry, ...grpc.CallOption) *tracehub.NftTableList); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tracehub.NftTableList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tracehub.FetchNftTableQry, ...grpc.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
